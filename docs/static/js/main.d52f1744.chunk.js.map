{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","action","onSubmit","e","preventDefault","trim","length","prev","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","item","GifExpertApp","setcategory","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAKaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAkB9C,OACQ,sBACIC,OAAO,IACPC,SAdS,SAAEC,GACnBA,EAAEC,iBAEGL,EAAWM,OAAOC,OAAS,IAC5BT,GAAe,SAAAU,GAAI,OAAKR,GAAL,mBAAoBQ,OACvCP,EAAc,MAOd,SAII,uBACQQ,KAAK,OACLC,MAAQV,EACRW,SAvBM,SAAEP,GACxBH,EAAeG,EAAEQ,OAAOF,a,+BCRnBG,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACRC,EADQ,iDACyCC,UAAUH,GADnD,+DAEKI,MAAOF,GAFZ,cAERG,EAFQ,gBAGOA,EAAKC,OAHZ,uBAGPC,EAHO,EAGPA,KACDC,EAAOD,EAAKE,KAAK,SAAAF,GAAS,IAAD,EACvB,MAAO,CACHG,GAAQH,EAAKG,GACbC,MAAQJ,EAAKI,MACbT,IAAG,UAAKK,EAAKK,cAAV,aAAK,EAAaC,iBAAiBX,QARpC,kBAYPM,GAZO,4CAAH,sDCCNM,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOT,EAAW,EAAXA,IACtC,OACI,sBAAKa,UAAU,yCAAf,UACI,qBAAKC,IAAMd,EAAMe,IAAMN,IACvB,kCAAMA,EAAN,WCDCO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EAEdf,mBAAS,CAC/BsB,KAAM,GACNY,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAiBxC,OAVAC,qBAAU,WACNvB,EAAQC,GAAWuB,MAAM,SAAAC,GACjBH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAItB,CAACnB,IAEGoB,EDd4BK,CAAczB,GAAnCY,EAFuB,EAE7BL,KAAeY,EAFc,EAEdA,QAEvB,OACI,gCACI,oBAAIJ,UAAU,oCAAd,SAAoDf,IAClDmB,GAAW,mBAAGJ,UAAU,mCAAb,wBACb,oBAAIA,UAAU,YAAd,SAEQH,EAAOH,KAAK,SAAAiB,GAAI,OACZ,cAAC,EAAD,eAESA,GADCA,EAAKhB,aEcxBiB,EA3BM,WAAO,IAAD,EAES1C,mBAAS,CAAC,cAFnB,mBAEhBe,EAFgB,KAEN4B,EAFM,KAKvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAa5C,cAAgB4C,IAC7B,uBAGA,mCAEQ5B,EAASS,KAAK,SAAAiB,GAAI,OACd,cAAC,EAAD,CAEI1B,SAAW0B,GADLA,YCRnBG,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OAAQ,cAAC,EAAD,IAAkBC,SAASC,eAAe,SAK3DX,M","file":"static/js/main.d52f1744.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n\n\nexport const AddCategory = ({ setCategories }) => {\n    const [inputValue, setinputValue] = useState('');\n\n    const handleInputchange = ( e ) => {\n        setinputValue( e.target.value )\n    }\n\n    const handleSubmit = ( e ) => {\n        e.preventDefault();\n\n        if ( inputValue.trim().length > 2 ) {\n            setCategories( prev => [inputValue, ...prev ])\n            setinputValue('');\n        }\n\n\n    }\n\n    return (\n            <form \n                action=\"#\" \n                onSubmit={ handleSubmit }\n                >\n                <input \n                        type=\"text\"\n                        value={ inputValue }\n                        onChange={ handleInputchange }\n\n                    />\n\n            </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","\nexport const getGif = async (category) => {\n        const url  = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=MZ3QtbwTABN5r7bp7oYc0x7lngj160Rh`;\n        const resp = await fetch( url );\n        const {data} = await resp.json();\n        const gifs = data.map( data => {\n                return {\n                    id    : data.id,\n                    title : data.title,\n                    url   : data.images?.downsized_medium.url\n                }\n            }\n        )\n        return gifs;\n    }","import React from 'react'\n\nexport const GifGridItem = ( { id, title, url } ) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p> { title } </p>\n        </div>\n    )\n}\n","import React from 'react';\n\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const { data: images , loading } = useFetchGifs( category );\n\n    return (\n        <div>\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n            { loading && <p className=\"animate__animated animate__flash\">Cargando..</p> }\n            <ul className=\"container\">\n                {\n                    images.map( item => (\n                        <GifGridItem \n                            key={ item.id }\n                            { ...item }\n                        />\n                    ))\n                }\n            </ul>\n        </div>\n    )\n}\n","import { useState, useEffect } from \"react\";\n\nimport { getGif } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGif( category ).then( imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n        })\n\n    }, [category]);\n\n    return state;\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [category, setcategory] = useState(['One Punch']);\n\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setcategory } />\n            <hr/>\n\n\n            <>\n                { \n                    category.map( item => (\n                        <GifGrid \n                            key={ item }\n                            category={ item } \n\n                        />\n                    ))\n                }\n            </>\n        </>\n    );\n}\n\nexport default GifExpertApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render( <GifExpertApp />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}